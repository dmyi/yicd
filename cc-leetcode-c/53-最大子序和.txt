
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
进阶:

如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。

解题思路
dp[i]表示以数组元素i结尾的最大连续子序列的和；
dp[0] = nums[0]是定义初始状态；
循环，如果dp[i]大于保存的最大值max则赋值给max;
所有dp[i]的最大值即使最大子序和。
代码

int maxSubArray(int* nums, int numsSize){
    if(nums == NULL || numsSize == 0) return 0;

    int *dp = (int *)malloc(sizeof(int) * numsSize);
    dp[0] = nums[0];
    int i,max;
    max = nums[0];

    for(i = 1; i < numsSize; i++) {
        if(dp[i - 1] <= 0 ) {
            dp[i] = nums[i];
        } else {
            dp[i] = dp[i - 1] + nums[i];
        }

        if(dp[i] > max)
            max = dp[i];
    }

    free(dp);
    return max;
}

作者：dmyi
链接：https://leetcode-cn.com/problems/maximum-subarray/solution/53-zui-da-zi-xu-he-ti-jie-by-dmyi/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

int maxSubArray(int* nums, int numsSize){
    if(nums == NULL || numsSize == 0) return 0;

    int dp = nums[0];
    int i,max;
    max = dp;

    for(i = 1; i < numsSize; i++) {
        if(dp <= 0 ) {
            dp = nums[i];
        } else {
            dp = dp + nums[i];
        }

        if(dp > max)
            max = dp;
    }

    return max;
}

