
给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

 

示例 1:

输入: coins = [1, 2, 5], amount = 11
输出: 3 
解释: 11 = 5 + 5 + 1
示例 2:

输入: coins = [2], amount = 3
输出: -1
 

说明:
你可以认为每种硬币的数量是无限的。

#define MIN(A, B) ((A) < (B) ? (A) : (B))
int coinChange(int* coins, int coinsSize, int amount){
    if(coins == NULL) return -1;

    int *dp = (int *)malloc(sizeof(int) * (amount + 1));
    dp[0] = 0;

    int i,j,ret; 
    for (i = 1; i <= amount; i++)
    {
        dp[i] = amount + 1; /* 防止都是1的面值，并巧妙地给dp[i]赋值  */
        for (j = 0; j < coinsSize; j++)
        {
            if (i < coins[j]) continue;
            dp[i] = MIN(dp[i], dp[i-coins[j]] + 1); /* 加1是因为匹配了conis[j]这个面值 找到这些硬币情况下的最小值 */                         
        }
    }

    ret = dp[amount] > amount ? -1 : dp[amount];
    free(dp);

    return ret;
}

