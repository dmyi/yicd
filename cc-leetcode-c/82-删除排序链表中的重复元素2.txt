给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。

示例 1:

输入: 1->2->3->3->4->4->5
输出: 1->2->5
示例 2:

输入: 1->1->1->2->3
输出: 2->3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

解题思路
定义cur变量保存第一次重复出现的位置，tmp保存当前节点的值；
定义flag记录tmp重复出现的次数；
如果循环的值和保存的值tmp不相等，tmp保存新值，判断flag是否大于0；
如果大于0说明之前有重复要删除的数据，则交换head和cur的值，把cur指向head的下一个节点；
如果head的下一个节点是NULL,说明是链表的末尾，如果末尾节点时还和tmp值相等则特殊处理；
如果tmp和头节点的值相同，说明链表值都一样，则返回NULL；
如果tmp与头节点的值不同，则重新循环链表找到cur的前一个节点进行处理。
代码
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* deleteDuplicates(struct ListNode* head){
    /*
    struct ListNode *dummy = (struct ListNode *)malloc(sizeof(struct ListNode));
    dummy->val = 0;
    dummy->next = head;
    */
    struct ListNode *newHead = head;
    struct ListNode *headbk = head;
    struct ListNode *cur = NULL;
    int tmp,flag;
    flag = 0;

    while(head != NULL) {

        if((head->val != tmp) || (head == newHead)) {
            if(flag > 0) {
                /* 用删除前一个的思路删除这些 */
                cur->val = head->val;
                cur->next = head->next;
                tmp = head->val;
                flag = 0;
                head = head->next;
                continue;
            }
            tmp = head->val;
            cur = head;
        }  else {

            /* 计数重复次数 */
            flag++; 
            if(head->next == NULL && head->val == tmp && flag > 0) {
                if(newHead->val == tmp)
                    return NULL;
                flag = 0;
                while(headbk != NULL) {
                    if(headbk == cur || headbk->next == cur) {
                        cur = head = headbk;
                        cur->next = NULL;
                        break;
                    }
                    headbk = headbk->next;
                }
            }
        }
        head = head->next;
    }

    return newHead;
}

作者：dmyi
链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/82-shan-chu-pai-xu-lian-biao-zhong-de-zhong-fu-1-9/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
