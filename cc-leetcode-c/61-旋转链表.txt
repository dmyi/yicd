给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/rotate-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

解题思路
首先做相应的特殊情况的判断，先求出链表的长度i，原链表首地址备份;
如果k % i == 0,则返回原始链表即可；
用n = i - (k % i) 求出要旋转的分界点，然后循环的过程中，记录分界点及链表末尾的节点用于拼接旋转后的链表；
拼接旋转后的链表返回新链表首地址。
代码
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* rotateRight(struct ListNode* head, int k){
    if(head == NULL || head->next == NULL || k == 0) return head;
    struct ListNode *headbk = head;
    struct ListNode *newHead = NULL;
    struct ListNode *tmp = NULL;

    int i,j,n;
    i = 0;
    j = 1;
    while(head != NULL) {
        
        head = head->next;
        i++;
    }
    if(k % i == 0)
        return headbk;

    n = (i - (k % i));
    head = headbk;
    while(head != NULL) {
        
        if(j == n) {
            tmp = head;
            newHead = head->next;
        }
        
        if(j == i) {
            tmp->next = NULL;
            head->next = headbk;
            return newHead;
        }

        head = head->next;
        j++;
    }
    return NULL;
}

作者：dmyi
链接：https://leetcode-cn.com/problems/rotate-list/solution/61-xuan-zhuan-lian-biao-ti-jie-by-dmyi/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

